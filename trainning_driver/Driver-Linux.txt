Device Driver Linux
	Chào mọi người, hôm này mình xin giới thiệu với mọi người cách mà mình tiếp 
cận, viết một driver cho một ngoại vi trên linux. Toàn bộ lý thuyết trong bài 
viết này là kinh nghiệm mình rút ra sau khi viết mốt số driver cho linux kernel,
mong rằng bài viết sẽ được cộng đồng nhận xét, góp ý để hoàn thiện hơn và giúp
cho người mới dễ dàng học tập hơn trong lĩnh vực Embedded Linux.

Đầu tiên, mình muốn đề cập tới việc "Linux quản lý một Peripheral như thế nào?".
				    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	Trên một board mạch nhúng, ta thường thấy sẽ có 1 con SoC làm bộ não của 
board mạch, sau đó người ta đặt lên mạch đó một số các Devices như Led, LCD,
Sensor,... Các Devices này sẽ được điều khiển bởi con SoC.

	Trên con SoC sẽ có các module peripherals như GPIO, SPI, I2C, UART,...
Các peripherals này sẽ làm nhiệm vụ truyền nhận data giữa SoC với các Devices
bên ngoài (Led, LCD, Sensor, ...). Để làm việc với phần hardware này, Linux
cần có các driver để quản lý việc thao tác với hardware tương ứng.

Và Linux Driver chia thành 2 loại driver để làm việc với các hardware đó, gồm:
Controller Driver (hay Bus Driver) và Protocol Driver (hay Device Driver).

+ Controller Driver sẽ quản lý việc thao tác với các module trên con SoC (GPIO,
SPI, I2C,...) nhiệm vụ của nó là cấu hình các thanh ghi trong module tương ứng.

+ Protocol Driver sẽ là nơi chứa các hàm để làm việc giao tiếp với một Device
cụ thể (Led, LCD,..). Phần Driver này sẽ không trực tiếp thao tác đọc ghi vào
các thanh ghi của module peripheral mà nó sẽ gọi các hàm đã được viết ở phần
Controller Driver để cấu hình các thanh ghi sao cho dữ liệu được truyền từ SoC
qua Devices.

/* Ví dụ: */
	Ta có phần driver để điều khiển module SPI gọi là SPI controller. Driver này
sẽ implement các hàm để thao tác với thanh ghi data trong module SPI để truyền
nhận dữ liệu thông qua chân MISO và MOSI của SPI module trên con SoC.
	Ta cần sử dụng module SPI để giao tiếp với một màn hình LCD.
Khi đó ta sẽ cần viết một Driver riêng cho LCD, trong driver này sẽ
có các hàm để gửi các chuỗi data phù hợp với tập lệnh của LCD nhằm hiển thị
data lên LCD. Driver này gọi là Protocol Driver.

	Như vậy, ta có thể thấy, Protocol Driver sẽ gọi xuống các hàm của Controller
Driver để sử dụng các Peripherals trên con SoC nhằm giao tiếp điều khiển Device.
Tuy nhiên, Linux muốn chúng ta đứng từ Protocol Driver và gọi thẳng xuống các
hàm của Controller Driver. Linux cung cấp cho chúng ta một lớp interface giữa
Controller Driver và Protocol Driver gọi là DRIVER CORE.

Thực chất, DRIVER CORE này là một bộ các APIs được kernel viết sẵn, các APIs này
sẽ yêu cầu nhận một số các tham số cụ thể liên quan tới module peripheral và nó
sẽ gọi tới các hàm của Controller Driver.

Sau đó, ở phần Protocol Driver thì công việc để sử dụng các module peripheral
thực ra là gọi tới các APIs này và truyền đúng tham số mà API yêu cầu. Để sử
dụng các APIs thì trong Protocol Driver cần include header file tương ứng.
Ví dụ với SPI là: #include <linux/spi.h>

Vậy, chúng ta sẽ có thể tưởng tượng mô hình từ tầng user xuống tới hardware như
hình dưới đây.

 ----------------------------------------------------------------
|                           Device File                          |  USER SPACE
 ---------------------------------------------------------------- 
|                         Protocol Driver                        |
|                                                                |
|                           DRIVER CORE                          |  KERNEL SPACE
|                                                                |
|                         Controller Driver                      |
 ---------------------------------------------------------------- 
|                            Registers                           |  HARDWARE
 ----------------------------------------------------------------

	Giờ ta đã hiểu rằng liên quan tới một module Peripheral sẽ cần 2 loại driver
là: Controller Driver và Protocol Driver. Tiếp theo, chúng ta sẽ đi sâu vào từng
loại driver này, tìm hiểu cách implement cho từng driver.

Nhưng trước tiên ta cần thống nhất về mặt idea khi tìm hiểu cách viết một driver
như sau:
- Khi tìm hiểu về bất kì loại driver nào (Controller hay Protocol), ta cần
nắm được 2 cái struct.
	+ struct thứ nhất, là struct driver_type dùng để đăng kí driver với kernel.
	+ struct thứ hai, là struct device_type/module_type dùng để đăng kí instance
	của module/device mà driver đó sẽ quản lý với kernel.
- Sau khi đã biết được 2 struct ta cần làm việc, tiếp đến ta cần nắm được cách
register/unregister struct ấy với kernel hay các hàm để làm việc với các struct
đó.

Sau khi có được 2 điều trên, các bạn hình dung form của driver sẽ như này:
================================================================================
/* include header files */

/* functions gán vào functions pointers trong struct quản lý module/device */
/* các hàm open, read, write, ioctl dùng cho struct file_operations */

static int my_probe(struct device_type)
{
	/* init struct module_type, gán các giá trị cho function pointers */
	/* register struct module_type */
}
static int my_remove(struct device_type)
{
	/* unregister struct module_type */
}

struct of_device_id dungnt98_of_match[] = {
	{
		.compatible = "dungnt98,compatibel"
	},
	{}
};
MODULE_DEVICE_TABLE(of, dungnt98_of_match);

static struct driver_type my_driver_type = {
	.probe = my_probe,
	.remove = my_remove,
	.driver = {
		.name = "my_spi",
		.owner = THIS_MODULE,
		.of_match_table = dungnt98_of_match,	/* Matching device tree node */
	},
};

static int __init func_init(void)
{
	/* register struct driver_type */
}
static void __exit func_exit(void)
{
	/* unregister struct driver_type */
}

moudle_init(func_init);
module_exit(func_exit);

MODULE_AUTHOR("Trong Dung");
MODULE_LICENSE("GPL");
...
================================================================================
- Đó là form chung cho một driver, khi đi vào chi tiết từng loại driver phục vụ
cho từng module hardware, có thể có sự sai khác đi một chút, ví dụ có loại như
Controller Driver sẽ không có phần tạo ra device file trong devfs và sẽ không
implement các hàm open, read, write, ioctl cho struct file_operations.
- Để khắc phục điều này, thì chúng ta dựa vào 2 tài liệu chính đó là:
Document trong source code kernel và Example code cho chính loại module đó.
================================================================================

Xong, giờ chúng ta sẽ cùng đi tìm Cách Viết Driver :D
-----------------------------------------------------
1. Controller Driver
~~~~~~~~~~~~~~~~~~~~
* Controller Driver sẽ là phần gần hardware nhất, làm nhiệm vụ quản lý module
peripheral và là nơi trực tiếp đọc ghi vào các thanh ghi của module ngoại vi.
* Mục tiêu cuối cùng của việc viết Controller Driver thường là đăng kí một
struct module_type để quản lý module peripheral với kernel, trong struct này sẽ
có các trường là các function pointers, các function pointers này sẽ được gọi ra
bởi các APIs trong phần DRIVER CORE.
* Vậy để trả lời câu hỏi "Làm sao để implement một Controller Driver?" ta sẽ
thực hiện giải các bài toán sau:
	1. struct module_type cần làm việc tên là gì?
	2. struct driver_type để đăng kí driver với kernel tên là gì?
	3. Các hàm nào để register và unregister các struct ấy?
	4. Thay vào form trên.

ví dụ: Implement GPIO controller driver để sử dụng module GPIO.
	1. struct module_type = struct gpio_chip.
	2. struct driver_type = struct platform_driver
	3. Các hàm register/unregister: 
	- hàm register struct platform_driver:
			module_platform_driver();
	- Các hàm register/unregister struct gpio_chip:
			gpiochip_add_data();
			gpiochip_irqchip_add(); // hàm cho việc sử dụng ngắt gpio
			gpiochip_set_chained_irqchip(); // hàm cho việc sử dụng ngắt gpio
			gpiochip_remove();
	4. Code

ví dụ: Implement SPI Controller driver để sử dụng module SPI với chế độ Master.
	1. struct module_type = struct spi_master.
	2. struct driver_type = struct platform_driver
	3. Các hàm register/unregister: 
	- hàm register struct platform_driver:
			platform_driver_register();
			platform_driver_unregister();

			hay có thể thay bằng: module_platform_driver();

	- Các hàm register/unregister struct spi_master:
			spi_register_master();
			spi_master_put();
	4. Điển form :D 
================================================================================
/* include header files */

/* functions gán vào functions pointers trong struct quản lý module/device */

static int my_probe(struct platform_device *pdev)
{
	/* init struct spi_master, gán các giá trị cho function pointers */
	/* register struct spi_master */
}
static int my_remove(struct platform_device *pdev)
{
	/* unregister struct spi_master */
}

struct of_device_id name_of_match[] = {
	{
		.compatibel = "dungnt98,compatible",
		.data = NULL,
	},
	{}
};
MODULE_DEVICE_TABLE(of, name_of_match);

static struct platform_driver my_spi_driver = {
	.probe = my_probe,
	.remove = my_remove,
	.driver = {
		.name = "my_spi",
		.owner = THIS_MODULE,
		.of_match_table = name_of_match,	/* Matching device tree node */
	},
};

static int __init func_init(void)
{
	/* register struct driver_type */
	platform_driver_register(&my_spi_driver);
}
static void __exit func_exit(void)
{
	/* unregister struct driver_type */
	platform_driver_unregister(&my_spi_driver);
}

moudle_init(func_init);
module_exit(func_exit);

MODULE_AUTHOR("Trong Dung");
MODULE_LICENSE("GPL");
...
================================================================================

NOTE:
	Có một điểm khá hay, đó là khi viết phần Controller Driver, thì thường
struct driver_type sẽ là struct platform_driver. Nên việc còn lại chỉ là tìm ra
struct quản lý  module của mình tên là gì mà thôi :D

2. Protocol Driver
~~~~~~~~~~~~~~~~~~
* Protocol Driver là phần sẽ gọi các APIs được cung cấp bởi DRIVER CORE.
* Phần này sẽ thường viết theo dạng character driver và tạo ra device file trong
devfs để tương tác với user space.
* Để implement phần này ta cũng làm tương tự như các bước ở trên.
Ở đây mình sẽ lấy ví dụ về SPI Protocol Driver như sau:

	1. struct device_type = struct spi_device.
	2. struct driver_type = struct spi_driver.
	3. Các hàm register/unregister: 
	- hàm register struct spi_driver:
		spi_register_driver();
		spi_unregister_driver();
	- Các hàm làm việc struct spi_device:
		#include <linux/spi.h> :)) - nó nằm trong CORE hết.

	4. Điển form :D 
================================================================================
/* include header files */

/* functions gán vào functions pointers trong struct quản lý module/device */

static int my_probe(struct spi_device *spi)
{
/* setup struct spi_device *spi, gán các giá trị cho các trường trong struct */
/* Create device file */
}
static int my_remove(struct spi_device *spi)
{
	/* free memory */
}

struct of_device_id LCD_of_match[] = {
	{
		.compatibel = "dungnt98,compatible",
		.data = NULL,
	},
	{}
};
MODULE_DEVICE_TABLE(of, LCD_of_match);

static struct spi_driver my_spi_driver = {
	.probe = my_probe,
	.remove = my_remove,
	.driver = {
		.name = "my_lcd",
		.owner = THIS_MODULE,
		.of_match_table = name_of_match,	/* Matching device tree node */
	},
};

static int __init func_init(void)
{
	/* register struct driver_type */
	spi_register_driver(&my_spi_driver);
}
static void __exit func_exit(void)
{
	/* unregister struct driver_type */
	spi_unregister_driver(&my_spi_driver);
}

moudle_init(func_init);
module_exit(func_exit);

MODULE_AUTHOR("Trong Dung");
MODULE_LICENSE("GPL");
...
================================================================================

II. User Space Driver
- Linux còn cung cấp 1 cách viết driver khác, gọi là user space driver.
Driver có chức năng tương đương với Protocol Driver nhưng được viết ở tầng user
bằng cách đọc ghi vào các file trong sysfs hoặc devfs tùy vào từng loại module.
Ví dụ:
- Với GPIO, user có thể thông qua sysfs để điều khiển chân gpio_pin mà không
cần viết driver trong kernel.
- Hay như với SPI, user có thể thông qua việc sử dụng spidev - thao tác qua file
/dev/spidevX.Y để giao tiếp với device mà không cần viết Protocol Driver.

- Về phần này, Document trong source code kernel có ghi rõ.

Trên đây mình đã trình bày cái view của mình khi tìm hiểu về một driver. Hi vọng
nó sẽ giúp ích được cho cộng đồng và nhận được những lời nhận xét từ cộng đồng.